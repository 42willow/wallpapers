name: "build and deploy"

on:
  push:
    branches: [main]
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: nixbuild/nix-quick-install-action@v30
      - uses: nix-community/cache-nix-action@v6
        id: nix-cache
        with:
          primary-key: nix-${{ runner.os }}-${{ hashFiles('**/*.nix', '**/flake.lock', 'scripts/**/*') }}
          restore-prefixes-first-match: nix-${{ runner.os }}-

      - if: ${{ steps.nix-cache.outputs.hit-primary-key == 'false' }}
        id: nix-build
        name: "build wallpapers"
        run: nix build .#full

      - name: "upload build artifacts"
        if: ${{ steps.nix-build.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: nix-result
          path: ./result/

      - name: "use cached wallpapers"
        id: use-cache
        if: ${{ steps.nix-cache.outputs.hit-primary-key == 'true' }}
        run: |
          ln -s $(find /nix/store/ -type d -name '*-wallpapers-*' | head -n 1) result

      - name: "upload cache artifacts"
        if: ${{ steps.use-cache.outcome == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: nix-result
          path: ./result/

  upload:
    runs-on: ubuntu-latest
    steps:
      - name: "download artifacts"
        uses: actions/download-artifact@v4
        with:
          name: nix-result

      - name: "zip wallpapers"
        run: |
          mkdir -p dist

          cp -rL --no-preserve=ownership result/share/wallpapers/* dist/

          for dir in dist/*; do
            zip -r "dist/wallpapers-$(basename "$dir").zip" "$dir"
          done

      - name: "upload action artifacts"
        uses: actions/upload-artifact@v4
        with:
          name: wallpapers
          path: ./dist/*.zip

      - name: "upload to release"
        run: gh release upload --clobber wallpapers ./dist/*.zip
        env:
          GH_TOKEN: ${{ github.token }}

      - name: install, build, and upload site
        uses: withastro/action@v3
        with:
          path: ./site/

  deploy-site:
    name: "deploy site"
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
